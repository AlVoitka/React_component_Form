
1.
есть классовый компонент Slider:


import {Component} from 'react';
import {Container} from 'react-bootstrap';
import './App.css';

class Slider extends Component {

    constructor(props) {
        super(props);
        this.state = {
            autoplay: false,
            slide: 0
        }
    }

    changeSlide = (i) => {
        this.setState(({slide}) => ({
            slide: slide + i
        }))
    }

    toggleAutoplay = () => {
        this.setState(({autoplay}) => ({
            autoplay: !autoplay
        }))
    }

    render() {
        return (
            <Container>
                <div className="slider w-50 m-auto">
                    <img className="d-block w-100" src="https://www.planetware.com/wpimages/2020/02/france-in-pictures-beautiful-places-to-photograph-eiffel-tower.jpg" alt="slide" />
                    <div className="text-center mt-5">Active slide {this.state.slide} <br/> {this.state.autoplay ? 'auto' : null}</div>
                    <div className="buttons mt-3">
                        <button 
                            className="btn btn-primary me-2"
                            onClick={() => this.changeSlide(-1)}>-1</button>
                        <button 
                            className="btn btn-primary me-2"
                            onClick={() => this.changeSlide(1)}>+1</button>
                        <button 
                            className="btn btn-primary me-2"
                            onClick={this.toggleAutoplay}>toggle autoplay</button>
                    </div>
                </div>
            </Container>
        )
    }
}


2.
 Теперь я создам функциональный компонет и введу в него хуки. те введу состояние во внутрь функционального 
компонента (что без хуков сделать невозможно):

По синтаксису у меня теперь нет ни конструктора ни состояния, а есть компонет который возвращает верстку:


const Slider = (props) => {
    return (
        <Container>
            <div className="slider w-50 m-auto">
                <img className="d-block w-100" src="https://www.planetware.com/wpimages/2020/02/france-in-pictures-beautiful-places-to-photograph-eiffel-tower.jpg" alt="slide" />
                <div className="text-center mt-5">Active slide {this.state.slide} <br/> {this.state.autoplay ? 'auto' : null}</div>
                <div className="buttons mt-3">
                    <button 
                        className="btn btn-primary me-2"
                        onClick={() => this.changeSlide(-1)}>-1</button>
                    <button 
                        className="btn btn-primary me-2"
                        onClick={() => this.changeSlide(1)}>+1</button>
                    <button 
                        className="btn btn-primary me-2"
                        onClick={this.toggleAutoplay}>toggle autoplay</button>
                </div>
            </div>
        </Container>
    )
}

3.
 Первое что нужно сделать, это импортировать хук useState:

import {Component, useState} from 'react';   --- вот таким образом
import {Container} from 'react-bootstrap';
import './App.css';


4.
Запускаю функцию useState()  чтобы она создала состояние внутри функционального компонента:
сосотояние которое хранилось  в классовых компонентах внутри конструктора в виде state, здесь храниться в обычных переменных:


   const [slide, setSlide] = useState();  --- вот запускаю функцию и она возвращает массив из двух элементов:


первый State - состояние = slide
второй - функция которая будет менять это состояние = setSlide - обысно начинается с set тк она устанавливает какоето значение
const [slide, setSlide] - это синтаксис диструктуризации массива, те я разбил массив с двумя элементами на два отдельных.
назвать их можно как угодно.

И для того чтобы передать  начальное значение состояния (state: 0), передаю его как аргумент во внутрь функции  - setState(0)
если не передам никакого значения состояния, то будет underfined


по итогу было так в классовом:

            constructor(props) {
                super(props);
                this.state = {
                    autoplay: false,
                    slide: 0 ----- вот одно из состояний
                }
            }

получил так в функциональном:

const [slide, setSlide] = useState(0);

Состояние вынесено в переменную в которой хранится значение ноль.


Пример:


onst CharList = () => {

    state = {    ---- вот состояние в конструкторе
        charList: [], ---- вот свойства состояния
        loading: true,
        error: false
    }

    const [charList, setCharList] = useState([]);   ---- первый аргумент свойство, вторым функция по изменению состояния (раньше setState)
    const [loading, setLoading] = useState(true);  --- аргумент в хуке - значение состояния
    const [error, setError] = useState(false));

    


5.
Теперь чтобы использовать это состояние нужно просто обратиться к переменной slide

return (
        <Container>
            <div className="slider w-50 m-auto">
                <img className="d-block w-100" src="https://www.s-to-photograph-eiffel-tower.jpg" alt="slide" />
                <div className="text-center mt-5">Active slide {slide} <br/></div>  -----------вот сюда передастся значение 0, что в состоянии
            </div>
        </Container>
    )



6.
 Теперь буду менять состояние динамически.
В классовом компоненте для этого использовался метод changeSlide:

changeSlide = (i) => {
    this.setState(({slide}) => ({
        slide: slide + i
    }))
}

а теперь сделаю это при помощи хука:



создам функцию function changeSlide(i)  которая принемает всебя аргумент i :

const Slider = (props) => {

    const [slide, setSlide] = useState(0);

    function changeSlide(i) {
        setSlide(slide + i);  --- тут я говорю что беру текущее состояние плюс i. setSlide - это та самая setState только обозванная 
    }                                                                      по другому (как вздумается)

    return (
        <Container>
            <div className="slider w-50 m-auto">
                <img className="d-block w-100" src="https://www.planetware.com/wpimages/2020/02/france-in-pictures-beautiful-places-to-photograph-eiffel-tower.jpg" alt="slide" />
                <div className="text-center mt-5">Active slide {slide} <br/></div>
                <div className="buttons mt-3">
                    <button 
                        className="btn btn-primary me-2"
                        onClick={() => changeSlide(-1)}> plus </button>  ----- и на обработчик вешаю эту функцию по изменению состояния
                    <button 
                        className="btn btn-primary me-2"
                        onClick={() => changeSlide(1)}> Minus </button>  ----- и вот
                    {/* <button 
                        className="btn btn-primary me-2"
                        onClick={this.toggleAutoplay}>toggle autoplay</button> */}
                </div>
            </div>
        </Container>
}

5. В классовом компоненте было состояние autoplay:

constructor(props) {
//         super(props);
//         this.state = {
//             autoplay: false,  ----- вот
//             slide: 0
//         }
//     }

создам это состояние в функциональном при помощи хука:

Для этого создаю еще одну переменную с состояниями ---- состояний можно создавать сколько угодно:

const [autoplay,setAutoplay] = useState(false);  --- задаю изначальное состояние false

состояние создано, оно лежит в autoplay и теперь при помощи функции setAutoplay буде менять это сотояние:

создам функцию toggleAutoplay() в которой вызываю setAutoplay
и помещаю в него значение противоположное состоянию- было false станет true

    function toggleAutoplay() {
        setAutoplay(!autoplay);
    }

5.1  Применяю функцию в верстке:

    return (
        <Container>
            <div className="slider w-50 m-auto">
                <img className="d-block w-100" src="https://www.planetware.com/wpimages/2020/02/france-in-pictures-beautiful-places-to-photograph-eiffel-tower.jpg" alt="slide" />
                <div className="text-center mt-5">Active slide {slide} <br/>{autoplay ? 'auto' : null}</div> -----вот активность еще тут
                <div className="buttons mt-3">
                    <button 
                        className="btn btn-primary me-2"
                        onClick={() => changeSlide(-1)}>-1</button>
                    <button 
                        className="btn btn-primary me-2"
                        onClick={() => changeSlide(1)}>+1</button>
                    <button 
                        className="btn btn-primary me-2"
                        onClick={toggleAutoplay}>toggle autoplay</button>  --- вот
                </div>
            </div>
        </Container>
    )

    {autoplay ? 'auto' : null}  - это проверка. Беру переменную autoplay провераю какое згначение внутри, и если true то подставляем строчку 'auto'
    а если false то null- ничего

5.2   
Если текущее состояние зависит от предыдущего!
То нужно вызывать колбэк функцию

 В классовых компонентах состояние работало асинхронно, те чтобы небыло багов когда я четко хочу чтобы изменения стейта строго
зависело и педыдущего состояния, я передавал колбэк функцию:

        changeSlide = (i) => {
//         this.setState(({slide}) => ({
//             slide: slide + i

а внутри хуков, если возникает ситуация когда стейт будет зависить от предудущего стейта, то нужно будет передавать колбэк функцию.
Сейчас мои состояния зависят от предыдущего, поэтому делаю так:

так было

 function changeSlide(i) {
        setSlide(slide + i);
    }

    function toggleAutoplay() {
        setAutoplay(!autoplay);
    }

так делаю:

function changeSlide(i) {
        setSlide(slide => slide + i);  -- вот
    }

    function toggleAutoplay() {
        setAutoplay(autoplay => !autoplay); ---вот
    }

дословно
(slide => slide + i);    
- это функция которая получает в себя оргумент slide  и внутри тела этой функции выполняю slide + i

(autoplay => !autoplay)  - колбэк принимает аргумент autoplay и внутри меняем его на противоположное значение